package com.hcm.controller;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hcm.entity.Claim;
import com.hcm.entity.ClaimType;
import com.hcm.entity.Member;
import com.hcm.payload.response.MessageResponse;
import com.hcm.serviceImpl.ClaimServiceImpl;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@CrossOrigin
@RestController
@RequestMapping("/api/v1/hcm/claim")
public class ClaimController {

	@Autowired
	ClaimServiceImpl claimServiceImpl;

	@RequestMapping("/member/{memberId}/type/{type}/amount/{amount}/remarks/{remarks}")
	public Claim submitClaim(@PathVariable("memberId") Long memberId, @PathVariable("type") String type,
			@PathVariable("amount") float amount, @PathVariable("remarks") String remarks) {
		Claim claim = new Claim();
		Member member = new Member();
		member.setId(memberId);
		claim.setMember(member);
		switch (type) {
		case "Vision":
			claim.setType(ClaimType.Vision);
			break;
		case "Dental":
			claim.setType(ClaimType.Dental);
			break;
		case "Medical":
			claim.setType(ClaimType.Medical);
			break;
		default:
			break;
		}

		claim.setAmount(amount);
		claim.setRemarks(remarks);
		LocalDate claimDate = LocalDate.now();
		claim.setClaimDate(claimDate);
		Claim submittedClaim = claimServiceImpl.addClaim(claim);
		if (null != submittedClaim) {
			return submittedClaim;
		} else {
			return null;
		}

	}

//	@RequestMapping("/member/{memberId}")
//	public Set<Claim> getClaimsOfMember(@PathVariable("memberId") Long memberId){
//		Member member = new Member();
//		member.setId(memberId);
//		Set<Claim> claimsOfmember = claimServiceImpl.getClaimsOfMember(member);		
//		return claimsOfmember;
//		
//	}

	@RequestMapping("/member/{memberId}")
	public ResponseEntity<?> getClaimsOfMember(@PathVariable("memberId") Long memberId) {
		Member member = new Member();
		member.setId(memberId);
		Set<Claim> claimsOfmember = claimServiceImpl.getClaimsOfMember(member);
		return ResponseEntity.ok(claimsOfmember);

	}

	@GetMapping("/search")
	public ResponseEntity<?> findMember(@RequestParam(value = "memberId", required = false) Long memberId,
			@RequestParam(value = "firstName", required = false) String firstName,
			@RequestParam(value = "lastName", required = false) String lastName,
			@RequestParam(value = "physicianName", required = false) String physicianName,
			@RequestParam(value = "claimId", required = false) Long claimId) {

		log.debug("inside search");

		if (null == firstName && null == lastName && null == memberId && null == physicianName && null == claimId) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: At least 1 input is required !"));
		} else if ((null != firstName && null == lastName) || (null == firstName && null != lastName)) {
			return ResponseEntity.badRequest()
					.body(new MessageResponse("Error: Both first and last name is required!"));
		} else {
			Member member = new Member();
			member.setId(memberId);
			Set<Claim> claimsOfmember = claimServiceImpl.getClaimsOfMember(member);
			
			if (!claimsOfmember.isEmpty()) {
				List<Claim> claimList = new ArrayList<>();
				for (Claim claim : claimsOfmember) {
					if (claim.getId() == claimId
							|| (claim.getMember().getFirstName().equalsIgnoreCase(firstName)
									&& claim.getMember().getLastName().equalsIgnoreCase(lastName))
							|| claim.getMember().getPhysician().getName().equalsIgnoreCase(physicianName)) {
						claimList.add(claim);

					}
				}
				claimList.forEach(claim-> System.out.println(claim.getMember().getCity()));
				
				return ResponseEntity.ok(claimList);
//				if (!sortedClaim.isEmpty()) {
//					return ResponseEntity.ok(sortedClaim);
//				} else {
//					return ResponseEntity.badRequest().body(new MessageResponse("Error: No member found!"));
//				}
			} else {
				return ResponseEntity.badRequest().body(new MessageResponse("Error: No claim- member found!"));
			}
		}

	}
}
