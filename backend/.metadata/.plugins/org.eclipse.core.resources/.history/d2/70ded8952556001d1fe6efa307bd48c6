package com.hcm.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hcm.entity.Member;
import com.hcm.payload.response.MessageResponse;
import com.hcm.serviceImpl.MemberServiceImpl;

@CrossOrigin
@RestController
@RequestMapping("/api/v1/hcm/member")
public class MemberController {

	@Autowired
	MemberServiceImpl memberServiceImpl;

	@PostMapping
	public ResponseEntity<?> addMember(@Valid @RequestBody Member member) {

		Member mem = memberServiceImpl.addMember(member);
		if (null != mem) {
			return ResponseEntity.ok(new MessageResponse("Member registered successfully!"));
		} else {
			return ResponseEntity.badRequest()
					.body(new MessageResponse("Error: Unable to register member!"));
		}

	}

	@GetMapping("/search")
	public ResponseEntity<?> findMember(@RequestParam(value = "memberId", required = false) Long memberId,
			@RequestParam(value = "firstName", required = false) String firstName,
			@RequestParam(value = "lastName", required = false) String lastName,
			@RequestParam(value = "physicianName", required = false) String physicianName,
			@RequestParam(value = "claimId", required = false) Long claimId) {

		if (null == firstName && null == lastName && null == memberId && null == physicianName && null == claimId) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: At least 1 input is required !"));
		} else if (null == firstName || null == lastName) {
			return ResponseEntity.badRequest()
					.body(new MessageResponse("Error: Both first and last name is required!"));
		} else {
			List<Member> list = memberServiceImpl.getMembers(memberId, firstName, lastName, physicianName, claimId);
			if (!list.isEmpty()) {
				return new ResponseEntity<>(list, HttpStatus.OK);
			} else {
				return ResponseEntity.badRequest().body(new MessageResponse("Error: No member found!"));
			}
		}
	}

}
